openapi: 3.0.1
info:
  title: Bookstore APIs - Riley Morris & Miguel Ramirez
  version: v0.1
servers:
  - url: http://localhost:8080/
    description: Generated server url
paths:
  /publisher:
    get:
      tags:
        - publisher-controller
      operationId: getAllPublishers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
    put:
      tags:
        - publisher-controller
      operationId: updatePublisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '204':
          description: No Content
    post:
      tags:
        - publisher-controller
      operationId: addPublisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Publisher'
  /book:
    get:
      tags:
        - book-controller
      operationId: getAllBooks
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - book-controller
      operationId: updateBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '204':
          description: No Content
    post:
      tags:
        - book-controller
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /author:
    get:
      tags:
        - author-controller
      operationId: getAuthors
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - author-controller
      operationId: updateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '204':
          description: No Content
    post:
      tags:
        - author-controller
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Author'
  /publisher/{id}:
    get:
      tags:
        - publisher-controller
      operationId: getPublisherByID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Publisher'
    delete:
      tags:
        - publisher-controller
      operationId: updatePublisher_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /book/{id}:
    get:
      tags:
        - book-controller
      operationId: getBookByID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
        - book-controller
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /author/{id}:
    get:
      tags:
        - author-controller
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - author-controller
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
components:
  schemas:
    Book:
      required:
        - author_id
        - id
        - isbn
        - price
        - publish_date
        - publisher_id
        - title
      type: object
      properties:
        id:
          type: integer
          format: int32
        isbn:
          type: string
        publish_date:
          type: string
          format: date
        author_id:
          type: integer
          format: int32
        title:
          type: string
        publisher_id:
          type: integer
          format: int32
        price:
          type: number
    Publisher:
      required:
        - city
        - email
        - id
        - name
        - phone
        - postal_code
        - state
        - street
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        phone:
          type: string
        email:
          type: string
        books:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Author:
      required:
        - city
        - email
        - first_name
        - last_name
        - phone
        - postal_code
        - state
        - street
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        phone:
          type: string
        email:
          type: string
        books:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
        id:
          type: integer
          format: int32
